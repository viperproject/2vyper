 /*
  Copyright (c) 2021 ETH Zurich
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

domain $Blockchain {

    function $blockhash($no: Int): Seq[Int]

    function $method_id($bb: Seq[Int], $l: Int): Seq[Int]

    function $keccak256($s: Seq[Int]): Seq[Int]

    function $keccak256_inv($s: Seq[Int]): Seq[Int]

    function $sha256($s: Seq[Int]): Seq[Int]

    function $sha256_inv($s: Seq[Int]): Seq[Int]

    function $ecrecover($s: Seq[Int], v: Int, r: Int, s: Int): Int

    function $ecadd($p: Seq[Int], $q: Seq[Int]): Seq[Int]

    function $ecmul($p: Seq[Int], $s: Int): Seq[Int]

    axiom $blockhash_ax {
        forall $no: Int :: { $blockhash($no) }
            |$blockhash($no)| == 32
    }

    axiom $method_id_ax {
        forall $bb: Seq[Int], $l: Int :: { $method_id($bb, $l) }
            |$method_id($bb, $l)| == $l
    }

    axiom $keccak256_ax {
        forall $s: Seq[Int] :: { $keccak256($s) } |$keccak256($s)| == 32
    }

    axiom $sha256_ax {
        forall $s: Seq[Int] :: { $sha256($s) } |$sha256($s)| == 32
    }

    axiom $ecadd_ax {
        forall $p: Seq[Int], $q: Seq[Int] :: { $ecadd($p, $q) } |$ecadd($p, $q)| == 2
    }

    axiom $ecmul_ax {
        forall $p: Seq[Int], $s: Int :: { $ecmul($p, $s) } |$ecmul($p, $s)| == 2
    }

    axiom $keccak256_inverse {
        forall $p: Seq[Int] :: { $keccak256_inv($keccak256($p)) } $keccak256_inv($keccak256($p)) == $p
    }

    axiom $sha256_inverse {
        forall $p: Seq[Int] :: { $sha256_inv($sha256($p)) } $sha256_inv($sha256($p)) == $p
    }

}